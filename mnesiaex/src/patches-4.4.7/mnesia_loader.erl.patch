--- mnesia_loader.erl.orig	2009-01-14 13:22:53.000000000 -0800
+++ mnesia_loader.erl	2009-01-14 13:26:49.000000000 -0800
@@ -135,7 +135,14 @@
 		{error, Error} ->
 		    {not_loaded, {"Failed to create dets table", Error}}
 	    end
-    end.
+    end;
+
+do_get_disc_copy2(Tab, Reason, Storage = {external_copies, _Mod}, _Type) ->
+    mnesia_index:init_index(Tab, Storage),
+    set({Tab, load_node}, node()),
+    set({Tab, load_reason}, Reason),
+    {loaded, ok}.
+
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %% Load a table from a remote node
@@ -384,7 +391,15 @@
 		    {Storage, Tab};
 		Else ->
 		    Else
-	    end
+	    end;
+        element(1, Storage) == external_copies ->
+            { _, Mod } = Storage,
+            case mnesia_monitor:unsafe_create_external(Tab, Mod, Cs) of
+                Tab ->
+                    {Storage, Tab};
+                Else ->
+                    Else
+            end
     end.
 
 tab_receiver(Node, Tab, Storage, Cs, PConv, OrigTabRec) ->
@@ -452,6 +467,9 @@
 	    get_data(Pid, TabRec)
     end.
 
+
+init_table(Tab, {external_copies, Mod}, Fun, false, false, Sender) ->
+    Mod:init_table(Tab, Fun, Sender);
 init_table(Tab, disc_only_copies, Fun, false, DetsInfo,Sender) ->
     ErtsVer = erlang:system_info(version),
     case DetsInfo of
@@ -577,7 +595,10 @@
 	    ok;
 	false ->
 	    ok
-    end.
+    end;
+handle_last({{external_copies, _}, _}, _Type, nobin) ->
+    ok.
+
 
 down(Tab, Storage) ->
     case Storage of
@@ -588,7 +609,9 @@
 	disc_only_copies ->
 	    TmpFile = mnesia_lib:tab2tmp(Tab),
 	    mnesia_lib:dets_sync_close(Tab),
-	    file:delete(TmpFile)
+	    file:delete(TmpFile);
+        {external_copies, Mod} ->
+            catch Mod:delete_table(Tab)
     end,
     mnesia_checkpoint:tm_del_copy(Tab, node()),
     mnesia_controller:sync_del_table_copy_whereabouts(Tab, node()),
@@ -613,21 +636,27 @@
 db_erase({disc_copies, Tab}, Key) ->
     true = ?ets_delete(Tab, Key);
 db_erase({disc_only_copies, Tab}, Key) ->
-    ok = dets:delete(Tab, Key).
+    ok = dets:delete(Tab, Key);
+db_erase({{external_copies, Mod}, Tab}, Key) ->
+    ok = Mod:delete(Tab, Key).
 
 db_match_erase({ram_copies, Tab} , Pat) ->
     true = ?ets_match_delete(Tab, Pat);
 db_match_erase({disc_copies, Tab} , Pat) ->
     true = ?ets_match_delete(Tab, Pat);
 db_match_erase({disc_only_copies, Tab}, Pat) ->
-    ok = dets:match_delete(Tab, Pat).
+    ok = dets:match_delete(Tab, Pat);
+db_match_erase({{external_copies, Mod}, Tab}, Pat) ->
+    ok = Mod:match_delete(Tab, Pat).
 
 db_put({ram_copies, Tab}, Val) ->
     true = ?ets_insert(Tab, Val);
 db_put({disc_copies, Tab}, Val) ->
     true = ?ets_insert(Tab, Val);
 db_put({disc_only_copies, Tab}, Val) ->
-    ok = dets:insert(Tab, Val).
+    ok = dets:insert(Tab, Val);
+db_put({{external_copies, Mod}, Tab}, Val) ->
+    ok = Mod:insert(Tab, Val).
 
 %% This code executes at the remote site where the data is
 %% executes in a special copier process.
