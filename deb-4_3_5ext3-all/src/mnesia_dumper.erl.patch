--- /usr/lib/erlang/lib/mnesia-4.3.5/src/mnesia_dumper.erl	2007-08-05 08:49:02.000000000 -0700
+++ ./mnesia_dumper.erl	2008-06-20 15:30:44.000000000 -0700
@@ -1,3 +1,5 @@
+%% @hidden
+
 %% ``The contents of this file are subject to the Erlang Public License,
 %% Version 1.1, (the "License"); you may not use this file except in
 %% compliance with the License. You should have received a copy of the
@@ -430,10 +432,17 @@
 	    Snmp = mnesia_tm:prepare_snmp(Tab, Key, [Item]),
 	    mnesia_tm:do_snmp(Tid, Snmp);
 
+	_ when element(1, Storage) == external_copies ->
+	    mnesia_tm:do_update_op(Tid, Storage, Item),
+	    Snmp = mnesia_tm:prepare_snmp(Tab, Key, [Item]),
+	    mnesia_tm:do_snmp(Tid, Snmp);
+
 	_ when Storage == unknown ->
 	    ignore
     end.
 
+disc_delete_table(Tab, {external_copies, Mod}) ->
+    Mod:delete_table(Tab);
 disc_delete_table(Tab, Storage) ->
     case mnesia_monitor:use_dir() of
 	true ->
@@ -461,9 +470,12 @@
 	    ignore
     end.
 
+disc_delete_indecies(Tab, Cs, {external_copies, Mod}) ->
+    Indecies = Cs#cstruct.index,
+    Mod:delete_index(Tab, Indecies);
 disc_delete_indecies(_Tab, _Cs, Storage) when Storage /= disc_only_copies ->
     ignore;
-disc_delete_indecies(Tab, Cs, disc_only_copies) ->
+disc_delete_indecies(Tab, Cs, disc_only_copies ) ->
     Indecies = Cs#cstruct.index,
     mnesia_index:del_transient(Tab, Indecies, disc_only_copies).
 
@@ -487,6 +499,10 @@
     {{Tab, Key}, ValList, Op} = Item,
     insert(Tid, Storage, Tab, Key, ValList, Op, InPlace, InitBy);
 
+insert_op(_, _, {op, change_table_copy_type, _, FromS, ToS, _}, _, _) 
+  when element(1, FromS) == external_copies;
+       element(1, ToS) == external_copies ->
+    ignore;
 insert_op(Tid, _, {op, change_table_copy_type, N, FromS, ToS, TabDef}, InPlace, InitBy) ->
     Cs = mnesia_schema:list2cs(TabDef),
     Val = mnesia_schema:insert_cstruct(Tid, Cs, true), % Update ram only
@@ -645,6 +661,8 @@
 						read_write),
 			    mnesia_log:unsafe_close_log(temp)
 		    end;
+                {external_copies, _} ->
+                    ignore;
 		_ ->
 		    Args = [{file, mnesia_lib:tab2dat(Tab)},
 			    {type, mnesia_lib:disk_type(Tab, Cs#cstruct.type)},
@@ -801,7 +819,13 @@
 	    insert_cstruct(Tid, Cs, true, InPlace, InitBy);
         Tab /= schema ->
 	    mnesia_controller:del_active_replica(Tab, Node),
-	    mnesia_lib:del({Tab, Storage}, Node),
+            Storage1 = if
+                           element(1, Storage) == external_copies ->
+                               external_copies;
+                           true ->
+                               Storage
+                       end,
+	    mnesia_lib:del({Tab, Storage1}, Node),
 	    if
 		Node == node() ->
 		    case Cs#cstruct.local_content of
@@ -865,6 +889,9 @@
 	    mnesia_index:init_indecies(Tab, Storage, [Pos]);
 	startup ->
 	    ignore; 
+        _ when element(1, Storage) == external_copies ->
+            {_, Mod} = Storage,
+            Mod:add_index(Tab, [Pos]);
 	_  ->
 	    mnesia_index:init_indecies(Tab, Storage, [Pos])
     end;
@@ -878,6 +905,9 @@
 	    mnesia_index:del_index_table(Tab, Storage, Pos);
 	startup -> 
 	    ignore;
+        _ when element(1, Storage) == external_copies ->
+            {_, Mod} = Storage,
+            Mod:delete_index(Tab, [Pos]);
 	_ ->
 	    mnesia_index:del_index_table(Tab, Storage, Pos)
     end,
@@ -909,6 +939,8 @@
     Cs = mnesia_schema:list2cs(TabDef),
     insert_cstruct(Tid, Cs, true, InPlace, InitBy).
 
+open_files(_, {external_copies, _}, _, _) ->
+    true;
 open_files(Tab, Storage, UpdateInPlace, InitBy)
   when Storage /= unknown, Storage /= ram_copies ->
     case get({?MODULE, Tab}) of
