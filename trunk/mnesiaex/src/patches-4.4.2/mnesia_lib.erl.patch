--- mnesia-4.4.2/src/mnesia_lib.erl	2007-11-26 06:07:42.000000000 -0700
+++ mnesia-4.4.2ext1/src/mnesia_lib.erl	2008-07-11 20:50:09.000000000 -0600
@@ -1,3 +1,5 @@
+%% @hidden
+
 %% ``The contents of this file are subject to the Erlang Public License,
 %% Version 1.1, (the "License"); you may not use this file except in
 %% compliance with the License. You should have received a copy of the
@@ -289,7 +291,7 @@
     not active_here(Tab).
 
 exists(Fname) ->
-    case file:rawopen(Fname, read) of
+    case file:open(Fname, [read, raw]) of
 	{ok, F} ->file:close(F), true;
 	_ -> false
     end.
@@ -317,12 +319,21 @@
 storage_type_at_node(Node, Tab) ->
     search_key(Node, [{disc_copies, val({Tab, disc_copies})},
 		      {ram_copies, val({Tab, ram_copies})},
-		      {disc_only_copies, val({Tab, disc_only_copies})}]).
+		      {disc_only_copies, val({Tab, disc_only_copies})},
+                      {external_copies, val({Tab, external_copies})}]).
 
 cs_to_storage_type(Node, Cs) ->
+    T = Cs#cstruct.type,
+    T1 = if 
+             is_tuple(T) andalso element(1, T) == external ->
+                 element(3, T);
+             true ->
+                 T
+         end,
     search_key(Node, [{disc_copies, Cs#cstruct.disc_copies},
 		      {ram_copies, Cs#cstruct.ram_copies},
-		      {disc_only_copies, Cs#cstruct.disc_only_copies}]).
+		      {disc_only_copies, Cs#cstruct.disc_only_copies},
+                      {{external_copies, T1}, Cs#cstruct.external_copies}]).
 
 schema_cs_to_storage_type(Node, Cs) ->
     case cs_to_storage_type(Node, Cs) of
@@ -545,6 +556,7 @@
     ?ets_lookup_element(mnesia_gvar, Name, 2).
 
 cs_to_nodes(Cs) ->
+    Cs#cstruct.external_copies ++
     Cs#cstruct.disc_only_copies ++
     Cs#cstruct.disc_copies ++
     Cs#cstruct.ram_copies.
@@ -977,9 +989,9 @@
     set({'$$$_report', P+1}, {date(), time(), DbgInfo}).
 
 copy_file(From, To) ->
-    case file:rawopen(From, {binary, read}) of
+    case file:open(From, [raw, binary, read]) of
 	{ok, F} ->
-	    case file:rawopen(To, {binary, write}) of
+	    case file:open(To, [raw, binary, write]) of
 		{ok, T} ->
 		    Res = copy_file_loop(F, T, 8000),
 		    file:close(F),
@@ -1012,18 +1024,32 @@
     db_get(val({Tab, storage_type}), Tab, Key).
 db_get(ram_copies, Tab, Key) -> ?ets_lookup(Tab, Key);
 db_get(disc_copies, Tab, Key) -> ?ets_lookup(Tab, Key);
-db_get(disc_only_copies, Tab, Key) -> dets:lookup(Tab, Key).
+db_get(disc_only_copies, Tab, Key) -> dets:lookup(Tab, Key);
+db_get(external_copies, Tab, Key) -> 
+    {_, Mod} = val({Tab, storage_type}),
+    db_get({external_copies, Mod}, Tab, Key);
+db_get({external_copies, Mod}, Tab, Key) -> 
+    Mod:lookup(Tab, Key).
 
 db_init_chunk(Tab) ->
     db_init_chunk(val({Tab, storage_type}), Tab, 1000).
 db_init_chunk(Tab, N) ->
     db_init_chunk(val({Tab, storage_type}), Tab, N).
 
+db_init_chunk(external_copies, Tab, N) ->
+    {_, Mod} = val({Tab, storage_type}), 
+    db_init_chunk({external_copies, Mod}, Tab, N);
+db_init_chunk({external_copies, Mod}, Tab, N) ->
+    Mod:select(Tab, [{'_', [], ['$_']}], N);
 db_init_chunk(disc_only_copies, Tab, N) ->
     dets:select(Tab, [{'_', [], ['$_']}], N);
 db_init_chunk(_, Tab, N) ->
     ets:select(Tab, [{'_', [], ['$_']}], N).
 
+db_chunk(external_copies, {Mod, State}) ->
+    db_chunk({external_copies, Mod}, State);
+db_chunk({external_copies, Mod}, {_, State}) ->
+    Mod:select(State);
 db_chunk(disc_only_copies, State) ->
     dets:select(State);
 db_chunk(_, State) ->
@@ -1034,7 +1060,12 @@
 
 db_put(ram_copies, Tab, Val) -> ?ets_insert(Tab, Val), ok;
 db_put(disc_copies, Tab, Val) -> ?ets_insert(Tab, Val), ok;
-db_put(disc_only_copies, Tab, Val) -> dets:insert(Tab, Val).
+db_put(disc_only_copies, Tab, Val) -> dets:insert(Tab, Val);
+db_put(external_copies, Tab, Val) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_put({external_copies, Mod}, Tab, Val);
+db_put({external_copies, Mod}, Tab, Val) -> 
+    Mod:insert(Tab, Val), ok.
 
 db_match_object(Tab, Pat) ->
     db_match_object(val({Tab, storage_type}), Tab, Pat).
@@ -1047,6 +1078,11 @@
 	_ -> Res
     end.
 
+catch_match_object(external_copies, Tab, Pat) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    catch_match_object({external_copies, Mod}, Tab, Pat);
+catch_match_object({external_copies, Mod}, Tab, Pat) -> 
+    catch Mod:match_object(Tab, Pat);
 catch_match_object(disc_only_copies, Tab, Pat) ->
     catch dets:match_object(Tab, Pat);
 catch_match_object(_, Tab, Pat) ->
@@ -1064,16 +1100,38 @@
 	_ -> Res
     end.
 
+catch_select(external_copies, Tab, Pat) ->
+    {_, Mod} = val({Tab, storage_type}), 
+    catch_select({external_copies, Mod}, Tab, Pat);
+catch_select({external_copies, Mod}, Tab, Pat) ->
+    catch Mod:select(Tab, Pat);
 catch_select(disc_only_copies, Tab, Pat) ->
     catch dets:select(Tab, Pat);
 catch_select(_, Tab, Pat) ->
     catch ets:select(Tab, Pat).
 
+db_select_init(external_copies, Tab, Pat, Limit) ->
+    {_, Mod} = val({Tab, storage_type}), 
+    db_select_init({external_copies, Mod}, Tab, Pat, Limit);
+db_select_init({external_copies, Mod}, Tab, Pat, Limit) ->
+    case Mod:select(Tab, Pat, Limit) of
+      {Matches, Continuation} when is_list(Matches) ->
+        {Matches, {Mod, Continuation}};
+      R ->
+        R
+    end;
 db_select_init(disc_only_copies, Tab, Pat, Limit) ->
     dets:select(Tab, Pat, Limit);
 db_select_init(_, Tab, Pat, Limit) ->
     ets:select(Tab, Pat, Limit).
 
+db_select_cont(external_copies, {Mod, Cont}, _Ms) ->
+    case Mod:select(Cont) of
+      {Matches, Continuation} when is_list(Matches) ->
+        {Matches, {Mod, Continuation}};
+      R ->
+        R
+    end;
 db_select_cont(disc_only_copies, Cont0, Ms) ->
     Cont = dets:repair_continuation(Cont0, Ms),
     dets:select(Cont);
@@ -1090,49 +1148,91 @@
 db_fixtable(dets, Tab, Bool) ->
     dets:safe_fixtable(Tab, Bool);
 db_fixtable(disc_only_copies, Tab, Bool) ->
-    dets:safe_fixtable(Tab, Bool).
+    dets:safe_fixtable(Tab, Bool);
+db_fixtable(external_copies, Tab, Bool) ->
+    {_, Mod} = val({Tab, storage_type}), 
+    db_fixtable({external_copies, Mod}, Tab, Bool);
+db_fixtable({external_copies, Mod}, Tab, Bool) ->
+    Mod:fixtable(Tab, Bool).
 
 db_erase(Tab, Key) ->
     db_erase(val({Tab, storage_type}), Tab, Key).
 db_erase(ram_copies, Tab, Key) -> ?ets_delete(Tab, Key), ok;
 db_erase(disc_copies, Tab, Key) -> ?ets_delete(Tab, Key), ok;
-db_erase(disc_only_copies, Tab, Key) -> dets:delete(Tab, Key).
+db_erase(disc_only_copies, Tab, Key) -> dets:delete(Tab, Key);
+db_erase(external_copies, Tab, Key) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_erase({external_copies, Mod}, Tab, Key);
+db_erase({external_copies, Mod}, Tab, Key) -> 
+    Mod:delete(Tab, Key), 
+    ok.
 
 db_match_erase(Tab, Pat) ->
     db_match_erase(val({Tab, storage_type}), Tab, Pat).
 db_match_erase(ram_copies, Tab, Pat) -> ?ets_match_delete(Tab, Pat), ok;
 db_match_erase(disc_copies, Tab, Pat) -> ?ets_match_delete(Tab, Pat), ok;
-db_match_erase(disc_only_copies, Tab, Pat) -> dets:match_delete(Tab, Pat).
+db_match_erase(disc_only_copies, Tab, Pat) -> dets:match_delete(Tab, Pat);
+db_match_erase(external_copies, Tab, Pat) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_match_erase({external_copies, Mod}, Tab, Pat);
+db_match_erase({external_copies, Mod}, Tab, Pat) -> 
+    Mod:match_delete(Tab, Pat), 
+    ok.
 
 db_first(Tab) ->
     db_first(val({Tab, storage_type}), Tab).
 db_first(ram_copies, Tab) -> ?ets_first(Tab);
 db_first(disc_copies, Tab) -> ?ets_first(Tab);
-db_first(disc_only_copies, Tab) -> dets:first(Tab).
+db_first(disc_only_copies, Tab) -> dets:first(Tab);
+db_first(external_copies, Tab) ->
+    {_, Mod} = val({Tab, storage_type}), 
+    db_first({external_copies, Mod}, Tab);
+db_first({external_copies, Mod}, Tab) ->
+    Mod:first(Tab).
 
 db_next_key(Tab, Key) ->
     db_next_key(val({Tab, storage_type}), Tab, Key).
 db_next_key(ram_copies, Tab, Key) -> ?ets_next(Tab, Key);
 db_next_key(disc_copies, Tab, Key) -> ?ets_next(Tab, Key);
-db_next_key(disc_only_copies, Tab, Key) -> dets:next(Tab, Key).
+db_next_key(disc_only_copies, Tab, Key) -> dets:next(Tab, Key);
+db_next_key(external_copies, Tab, Key) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_next_key({external_copies, Mod}, Tab, Key);
+db_next_key({external_copies, Mod}, Tab, Key) -> 
+    Mod:next(Tab, Key).
 
 db_last(Tab) ->
     db_last(val({Tab, storage_type}), Tab).
 db_last(ram_copies, Tab) -> ?ets_last(Tab);
 db_last(disc_copies, Tab) -> ?ets_last(Tab);
-db_last(disc_only_copies, Tab) -> dets:first(Tab). %% Dets don't have order
+db_last(disc_only_copies, Tab) -> dets:first(Tab); %% Dets don't have order
+db_last(external_copies, Tab) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_last({external_copies, Mod}, Tab);
+db_last({external_copies, Mod}, Tab) -> 
+    Mod:last(Tab).
 
 db_prev_key(Tab, Key) ->
     db_prev_key(val({Tab, storage_type}), Tab, Key).
 db_prev_key(ram_copies, Tab, Key) -> ?ets_prev(Tab, Key);
 db_prev_key(disc_copies, Tab, Key) -> ?ets_prev(Tab, Key);
-db_prev_key(disc_only_copies, Tab, Key) -> dets:next(Tab, Key). %% Dets don't have order
+db_prev_key(disc_only_copies, Tab, Key) -> dets:next(Tab, Key); %% Dets don't have order
+db_prev_key(external_copies, Tab, Key) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_prev_key({external_copies, Mod}, Tab, Key);
+db_prev_key({external_copies, Mod}, Tab, Key) -> 
+    Mod:prev(Tab, Key).
 
 db_slot(Tab, Pos) ->
     db_slot(val({Tab, storage_type}), Tab, Pos).
 db_slot(ram_copies, Tab, Pos) -> ?ets_slot(Tab, Pos);
 db_slot(disc_copies, Tab, Pos) -> ?ets_slot(Tab, Pos);
-db_slot(disc_only_copies, Tab, Pos) -> dets:slot(Tab, Pos).
+db_slot(disc_only_copies, Tab, Pos) -> dets:slot(Tab, Pos);
+db_slot(external_copies, Tab, Pos) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_slot({external_copies, Mod}, Tab, Pos);
+db_slot({external_copies, Mod}, Tab, Pos) -> 
+    Mod:slot(Tab, Pos).
 
 db_update_counter(Tab, C, Val) ->
     db_update_counter(val({Tab, storage_type}), Tab, C, Val).
@@ -1141,13 +1241,23 @@
 db_update_counter(disc_copies, Tab, C, Val) ->
     ?ets_update_counter(Tab, C, Val);
 db_update_counter(disc_only_copies, Tab, C, Val) ->
-    dets:update_counter(Tab, C, Val).
+    dets:update_counter(Tab, C, Val);
+db_update_counter(external_copies, Tab, C, Val) ->
+    {_, Mod} = val({Tab, storage_type}), 
+    db_update_counter({external_copies, Mod}, Tab, C, Val);
+db_update_counter({external_copies, Mod}, Tab, C, Val) ->
+    Mod:update_counter(Tab, C, Val).
 
 db_erase_tab(Tab) ->
     db_erase_tab(val({Tab, storage_type}), Tab).
 db_erase_tab(ram_copies, Tab) -> ?ets_delete_table(Tab);
 db_erase_tab(disc_copies, Tab) -> ?ets_delete_table(Tab);
-db_erase_tab(disc_only_copies, _Tab) -> ignore.
+db_erase_tab(disc_only_copies, _Tab) -> ignore;
+db_erase_tab(external_copies, Tab) -> 
+    {_, Mod} = val({Tab, storage_type}), 
+    db_erase_tab({external_copies, Mod}, Tab);
+db_erase_tab({external_copies, Mod}, Tab) -> 
+    Mod:delete_table(Tab).
 
 %% assuming that Tab is a valid ets-table
 dets_to_ets(Tabname, Tab, File, Type, Rep, Lock) ->
