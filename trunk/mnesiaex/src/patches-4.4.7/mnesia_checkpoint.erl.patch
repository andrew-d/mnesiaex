--- mnesia_checkpoint.erl.orig	2009-01-14 13:22:53.000000000 -0800
+++ mnesia_checkpoint.erl	2009-01-14 13:44:55.000000000 -0800
@@ -697,6 +697,10 @@
     FlatName = lists:flatten(io_lib:write(Name)),
     mnesia_lib:dir(lists:concat([?MODULE, "_", Tab, "_", FlatName, ".RET"])).
 
+retainer_create(_Cp, R, Tab, Name, Ext = {external_copies, Mod}) ->
+    {Tab, Name} = Mod:create_table({Tab, Name}, val({Tab, cstruct})),
+    dbg_out("Checkpoint retainer created ~p ~p~n", [Name, Tab]),
+    R#retainer{store = {Ext, {Tab, Name}}, really_retain = true};
 retainer_create(_Cp, R, Tab, Name, disc_only_copies) ->
     Fname = tab2retainer({Tab, Name}),
     file:delete(Fname),
@@ -756,15 +760,23 @@
 traverse_dcd(eof, _Log, _Fun) ->
     ok.
 
+retainer_get({{external_copies, Mod}, Store}, Key) -> 
+    Mod:lookup(Store, Key);
 retainer_get({ets, Store}, Key) -> ?ets_lookup(Store, Key);
 retainer_get({dets, Store}, Key) -> dets:lookup(Store, Key).
 
+retainer_put({{external_copies, Mod}, Store}, Val) -> 
+    Mod:insert(Store, Val);
 retainer_put({ets, Store}, Val) -> ?ets_insert(Store, Val);
 retainer_put({dets, Store}, Val) -> dets:insert(Store, Val).
 
+retainer_first({{external_copies, Mod}, Store}) -> 
+    Mod:first(Store);
 retainer_first({ets, Store}) -> ?ets_first(Store);
 retainer_first({dets, Store}) -> dets:first(Store).
  
+retainer_next({{external_copies, Mod}, Store}, Key) -> 
+    Mod:next(Store, Key);
 retainer_next({ets, Store}, Key) -> ?ets_next(Store, Key);
 retainer_next({dets, Store}, Key) -> dets:next(Store, Key).
 
@@ -783,11 +795,15 @@
 
 retainer_fixtable(Tab, Bool) when atom(Tab) ->
     mnesia_lib:db_fixtable(val({Tab, storage_type}), Tab, Bool);
+retainer_fixtable({Ext = {external_copies, _}, Tab}, Bool) ->
+    mnesia_lib:db_fixtable(Ext, Tab, Bool);
 retainer_fixtable({ets, Tab}, Bool) ->
     mnesia_lib:db_fixtable(ram_copies, Tab, Bool);
 retainer_fixtable({dets, Tab}, Bool) ->
     mnesia_lib:db_fixtable(disc_only_copies, Tab, Bool).
 
+retainer_delete({{external_copies, Mod}, Store}) ->
+    Mod:delete_table(Store);
 retainer_delete({ets, Store}) ->
     ?ets_delete_table(Store);
 retainer_delete({dets, Store}) ->
